// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveLeftFront = NULL;
SpeedController* RobotMap::driveLeftRear = NULL;
SpeedController* RobotMap::driveRightFront = NULL;
SpeedController* RobotMap::driveRightRear = NULL;
RobotDrive* RobotMap::driveDrivetrain = NULL;
SpeedController* RobotMap::driveStrafe = NULL;
Gyro* RobotMap::drivegyro = NULL;
Encoder* RobotMap::driveLeftEncoder = NULL;
Encoder* RobotMap::driveRightEncoder = NULL;
Encoder* RobotMap::driveHdriveEncoder = NULL;
SpeedController* RobotMap::liftLift = NULL;
DigitalInput* RobotMap::liftTopLimit = NULL;
DigitalInput* RobotMap::liftBottomLimit = NULL;
SpeedController* RobotMap::liftLiftCim = NULL;
Encoder* RobotMap::liftLiftEncoder = NULL;
Solenoid* RobotMap::grabberLight = NULL;
Solenoid* RobotMap::grabberToteGripper = NULL;
DoubleSolenoid* RobotMap::grabberPusher = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Solenoid* RobotMap::grabberPurpleTopLights = NULL;
Solenoid* RobotMap::grabberGreenTopLight = NULL;
Solenoid* RobotMap::liftBlueLiftLights =  NULL;
Solenoid* RobotMap::liftRedLiftLights = NULL;
Solenoid* RobotMap::liftGreenLiftLights = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveLeftFront = new Talon(0);
	lw->AddActuator("Drive", "LeftFront", (Talon*) driveLeftFront);
	
	driveLeftRear = new Talon(1);
	lw->AddActuator("Drive", "LeftRear", (Talon*) driveLeftRear);
	
	driveRightFront = new Talon(2);
	lw->AddActuator("Drive", "RightFront", (Talon*) driveRightFront);
	
	driveRightRear = new Talon(3);
	lw->AddActuator("Drive", "RightRear", (Talon*) driveRightRear);
	
	driveDrivetrain = new RobotDrive(driveLeftFront, driveLeftRear,
              driveRightFront, driveRightRear);
	
	driveDrivetrain->SetSafetyEnabled(true);
        driveDrivetrain->SetExpiration(0.1);
        driveDrivetrain->SetSensitivity(0.5);
        driveDrivetrain->SetMaxOutput(1.0);

	driveStrafe = new Talon(4);
	lw->AddActuator("Drive", "Strafe", (Talon*) driveStrafe);
	
	drivegyro = new Gyro(0);
	lw->AddSensor("Drive", "gyro", drivegyro);
	drivegyro->SetSensitivity(0.007);
	driveLeftEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drive", "LeftEncoder", driveLeftEncoder);
	driveLeftEncoder->SetDistancePerPulse(0.05235987755982989);
        driveLeftEncoder->SetPIDSourceParameter(Encoder::kDistance);
	driveRightEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drive", "RightEncoder", driveRightEncoder);
	driveRightEncoder->SetDistancePerPulse(0.05235987755982989);
        driveRightEncoder->SetPIDSourceParameter(Encoder::kDistance);
	driveHdriveEncoder = new Encoder(8, 9, false, Encoder::k4X);
	lw->AddSensor("Drive", "HdriveEncoder", driveHdriveEncoder);
	driveHdriveEncoder->SetDistancePerPulse(0.05235987755982989);
        driveHdriveEncoder->SetPIDSourceParameter(Encoder::kDistance);
	liftLift = new Talon(5);
	lw->AddActuator("Lift", "Lift", (Talon*) liftLift);
	
	liftTopLimit = new DigitalInput(4);
	lw->AddSensor("Lift", "TopLimit", liftTopLimit);
	
	liftBottomLimit = new DigitalInput(5);
	lw->AddSensor("Lift", "BottomLimit", liftBottomLimit);
	
	liftLiftCim = new Talon(8);
	lw->AddActuator("Lift", "LiftCim", (Talon*) liftLiftCim);
	
	liftLiftEncoder = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Lift", "LiftEncoder", liftLiftEncoder);
	liftLiftEncoder->SetDistancePerPulse(0.0114583333333333);
        liftLiftEncoder->SetPIDSourceParameter(Encoder::kDistance);
	grabberLight = new Solenoid(0, 7);
	lw->AddActuator("Grabber", "Light", grabberLight);
	
	grabberToteGripper = new Solenoid(0, 2);
	lw->AddActuator("Grabber", "ToteGripper", grabberToteGripper);
	
	grabberPusher = new DoubleSolenoid(0, 0, 1);      
	lw->AddActuator("Grabber", "Pusher", grabberPusher);
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	grabberPurpleTopLights = new Solenoid(0, 6);
	lw->AddActuator("Grabber", "PurpleTopLights", grabberPurpleTopLights);

	grabberGreenTopLight = new Solenoid(0, 7);
	lw->AddActuator("Grabber", "GreenTopLight", grabberGreenTopLight);

	liftRedLiftLights = new Solenoid(0, 3);
	lw->AddActuator("Lift", "RedLiftLights", liftRedLiftLights);

	liftGreenLiftLights = new Solenoid(0, 4);
	lw->AddActuator("Lift", "GreenLiftLights", liftGreenLiftLights);

	liftBlueLiftLights = new Solenoid(0, 5);
	lw->AddActuator("Lift", "BlueLiftLights", liftBlueLiftLights);

}
