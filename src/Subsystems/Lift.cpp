// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Lift.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/oi_Lift.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Lift::Lift() : Subsystem("Lift") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	lift = RobotMap::liftLift;
	topLimit = RobotMap::liftTopLimit;
	bottomLimit = RobotMap::liftBottomLimit;
	liftCim = RobotMap::liftLiftCim;
	liftEncoder = RobotMap::liftLiftEncoder;
	stabilizer = RobotMap::liftStabilizer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	/*blueLiftLights = RobotMap::liftBlueLiftLights;
	redLiftLights = RobotMap::liftRedLiftLights;
	greenLiftLights = RobotMap::liftGreenLiftLights;*/
}
    
void Lift::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new oi_Lift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Lift::MoveLift(double speed){
	if(topLimit->Get()){
		if(speed < 0){
			Go(speed);
		}else{
			Go(0);
		}
	}else if(bottomLimit->Get()){
		if(speed > 0){
			Go(speed);
		}else{
			Go(0);
		}
	}else{
		Go(speed);
	}
}
void Lift::Go(double speed){
	liftCim->Set(speed);
	if(speed>0){
		//greenLiftLights->Set(true);
   		//blueLiftLights->Set(false);
   		//redLiftLights->Set(false);
	} else if(speed <0){
   		//greenLiftLights->Set(false);
   		//blueLiftLights->Set(true);
   		//redLiftLights->Set(false);
   	} else {
   		//greenLiftLights->Set(false);
   		//blueLiftLights->Set(false);
   		//redLiftLights->Set(true);
   	}
}
void Lift::Stop(){
	MoveLift(0);
}
void Lift::Reset(){
	liftEncoder->Reset();
}
